# Generated by Django 3.2.5 on 2022-05-12 17:30

import DataRepo.models.tracer_labeled_class
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('DataRepo', '0013_auto_20220511_1648'),
    ]

    operations = [
        migrations.CreateModel(
            name='PeakDataLabel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('labeled_element', models.CharField(blank=True, choices=[('C', 'Carbon'), ('N', 'Nitrogen'), ('H', 'Hydrogen'), ('O', 'Oxygen'), ('S', 'Sulfur')], default='C', help_text='The type of element that is labeled in this observation (e.g. "C", "H", "O").', max_length=1, null=True)),
                ('labeled_count', models.PositiveSmallIntegerField(blank=True, help_text='The number of labeled atoms (M+) observed relative to the presumed compound referred to in the peak group.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('mass_number', models.PositiveSmallIntegerField(blank=True, help_text="The sum of the number of protons and neutrons of the labeled atom, a.k.a. 'isotope', e.g. Carbon 14.  The number of protons identifies the element that this tracer is an isotope of.  The number of neutrons in the element equals the number of protons, but in an isotope, the number of neutrons will be less than or greater than the number of protons.  Note, this differs from the 'atomic number' which indicates the number of protons only.", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('peak_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='DataRepo.peakdata')),
            ],
            options={
                'verbose_name': 'label observation',
                'verbose_name_plural': 'label observations',
                'ordering': ['labeled_element', 'labeled_count', 'mass_number', 'peak_data'],
            },
            bases=(models.Model, DataRepo.models.tracer_labeled_class.TracerLabeledClass),
        ),
        migrations.AddConstraint(
            model_name='peakdatalabel',
            constraint=models.UniqueConstraint(fields=('peak_data', 'labeled_element', 'labeled_count'), name='unique_peakdata'),
        ),
    ]

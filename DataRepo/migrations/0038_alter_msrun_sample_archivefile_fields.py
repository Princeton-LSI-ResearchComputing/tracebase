from django.db import migrations, models
import django.db.models.deletion

class Migration(migrations.Migration):

    dependencies = [
        ("DataRepo", "0037_make_msrun_sample_independent_of_peakgroup"),
    ]

    operations = [
        # The following alter field operations were separated from 0037_make_msrun_sample_independent_of_peakgroup due
        # to the following error upon migrate:
        # django.db.utils.OperationalError: cannot ALTER TABLE "DataRepo_msrunsample" because it has pending trigger
        # events

        # Change ms_data_file field to null=False
        migrations.AlterField(
            model_name='msrunsample',
            name='ms_data_file',
            field=models.ForeignKey(
                to="DataRepo.ArchiveFile",
                null=False,
                blank=False,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="mz_to_msrunsamples",
                help_text="A file representing a subset of data extracted from the raw file (e.g. an mzXML file).",
            ),
        ),

        # Change ms_raw_file field to null=False
        migrations.AlterField(
            model_name='msrunsample',
            name='ms_raw_file',
            field=models.ForeignKey(
                to="DataRepo.ArchiveFile",
                null=False,
                blank=False,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="raw_to_msrunsamples",
                help_text=(
                    "A raw file (generated by an instrument) representing one of potentially multiple mass "
                    "spectrometry runs of this sample."
                ),
            ),
        ),

        # NOTE: The following change will require removing some peakgroups which have multiple representations in some
        # samples/sequences.  To see which peak groups will need to be addressed, run the following in the shell:
        #
        # from DataRepo.models import PeakGroup
        # pgs = PeakGroup.objects.all()
        # ddict = {}
        # for pg in pgs:
        #     pgk = f"{pg.name} {pg.sample} {pg.msrun_sequence}"
        #     if pgk not in ddict.keys():
        #         ddict[pgk] = 0
        #     ddict[pgk] += 1
        # for dpg in [pgk for pgk in ddict.keys() if ddict[pgk] > 1]:
        #     print(f"{dpg}: {ddict[dpg]}")

        migrations.RemoveConstraint(
            model_name="peakgroup",
            name="unique_peakgroup",
        ),
        migrations.AddConstraint(
            model_name="peakgroup",
            constraint=models.UniqueConstraint(
                fields=("name", "sample", "msrun_sequence"), name="unique_peakgroup"
            ),
        ),
    ]
# Generated by Django 3.2.5 on 2022-05-11 20:48

import DataRepo.models.tracer_labeled_class
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('DataRepo', '0012_auto_20220301_1011'),
    ]

    operations = [
        migrations.CreateModel(
            name='Infusate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="A unique name or lab identifier of the infusate 'recipe'.", max_length=256, unique=True)),
            ],
            options={
                'verbose_name': 'infusate',
                'verbose_name_plural': 'infusates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tracer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="A unique name or lab identifier of the tracer, e.g. 'lysine-C14'.", max_length=256, unique=True)),
                ('labeled_atom', models.CharField(blank=True, choices=[('C', 'Carbon'), ('N', 'Nitrogen'), ('H', 'Hydrogen'), ('O', 'Oxygen'), ('S', 'Sulfur')], default='C', help_text='The type of atom that is labeled in the tracer compound (e.g. "C", "H", "O").', max_length=1, null=True)),
                ('labeled_count', models.PositiveSmallIntegerField(blank=True, help_text='The number of labeled atoms (M+) in the tracer compound supplied to this animal.  Note that the labeled_count must be greater than or equal to the number of labeled_positions.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('labeled_positions', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)]), help_text='The known labeled atom positions in the compound.  Note that the number of known labeled positions must be less than or equal to the labeled_count.', size=None)),
                ('mass_number', models.PositiveSmallIntegerField(blank=True, help_text="The sum of the number of protons and neutrons of the labeled atom, a.k.a. 'isotope', e.g. Carbon 14.  The number of protons identifies the element that this tracer is an isotope of.  The number of neutrons in the element equals the number of protons, but in an isotope, the number of neutrons will be less than or greater than the number of protons.  Note, this differs from the 'atomic number' which indicates the number of protons only.", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
            ],
            options={
                'verbose_name': 'tracer',
                'verbose_name_plural': 'tracers',
                'ordering': ['name'],
            },
            bases=(models.Model, DataRepo.models.tracer_labeled_class.TracerLabeledClass),
        ),
        migrations.CreateModel(
            name='TracerIngredient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('concentration', models.FloatField(blank=True, help_text="The millimolar concentration of the tracer in a specific infusate 'recipe' (mM).", null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'ingredient',
                'verbose_name_plural': 'ingredients',
                'ordering': ['infusate', 'tracer'],
            },
        ),
        migrations.AlterModelOptions(
            name='peakdata',
            options={'ordering': ['peak_group', '-corrected_abundance'], 'verbose_name': 'peak data', 'verbose_name_plural': 'peak data'},
        ),
        migrations.RemoveConstraint(
            model_name='peakdata',
            name='unique_peakdata',
        ),
        migrations.RemoveField(
            model_name='animal',
            name='tracer_compound',
        ),
        migrations.RemoveField(
            model_name='animal',
            name='tracer_infusion_concentration',
        ),
        migrations.RemoveField(
            model_name='animal',
            name='tracer_labeled_atom',
        ),
        migrations.RemoveField(
            model_name='animal',
            name='tracer_labeled_count',
        ),
        migrations.RemoveField(
            model_name='peakdata',
            name='labeled_count',
        ),
        migrations.RemoveField(
            model_name='peakdata',
            name='labeled_element',
        ),
        migrations.AlterField(
            model_name='animal',
            name='tracer_infusion_rate',
            field=models.FloatField(blank=True, help_text='The rate of infusion of the tracer solution in microliters/min/gram of body weight of the animal (ul/min/g).', null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='traceringredient',
            name='infusate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataRepo.infusate'),
        ),
        migrations.AddField(
            model_name='traceringredient',
            name='tracer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataRepo.tracer'),
        ),
        migrations.AddField(
            model_name='tracer',
            name='compound',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='tracer', to='DataRepo.compound'),
        ),
        migrations.AddField(
            model_name='infusate',
            name='tracers',
            field=models.ManyToManyField(help_text="Tracers included in this infusate 'recipe'.", through='DataRepo.TracerIngredient', to='DataRepo.Tracer'),
        ),
    ]

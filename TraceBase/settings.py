"""
Django settings for TraceBase project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from typing import Dict

import environ
from django.db.backends.postgresql.psycopg_any import IsolationLevel

env = environ.Env()
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Raises django's ImproperlyConfigured exception if SECRET_KEY not in os.environ
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY", default="unsafe-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
# NOTE: If you want to test what you would see in production when DEBUG=False, you must start the server with:
#     python manage.py runserver --insecure
# because runserver will not load static files without it (whereas in a production environment, the web server would
# serve those files).  See https://stackoverflow.com/a/5836728/2057516
DEBUG = env.bool("DEBUG", default=False)

# Setting READONLY to True disables the upload page, among other potential things.  Set it to True if the site is
# accessible by the public and you don't want the public to be able to submit upload data, i.e. the site's only purpose
# is to "publish" data.  If you want both private and public access simultaneously, that is not currently supported.
# You can achive this by having 2 sites: a public one and a private one.
READONLY = env.bool("READONLY", default=False)

# Web Server timout in seconds
GATEWAY_TIMEOUT = env.int("GATEWAY_TIMEOUT", default=60)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost", "127.0.0.1"])

# Application definition

INSTALLED_APPS = [
    "DataRepo.apps.DatarepoConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "DataRepo.tests.apps.test_apps.LoaderTestConfig",
]

CUSTOM_INSTALLED_APPS = env.list("CUSTOM_INSTALLED_APPS", default=None)
if CUSTOM_INSTALLED_APPS:
    INSTALLED_APPS.extend(CUSTOM_INSTALLED_APPS)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "TraceBase.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "DataRepo.context_processors.globals",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "TraceBase.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD": env("DATABASE_PASSWORD"),
        "HOST": env("DATABASE_HOST"),
        "PORT": env("DATABASE_PORT"),
        # Remove the isolation_level option if your DB does not support IsolationLevel.REPEATABLE_READ.
        "OPTIONS": {
            # See: https://www.postgresql.org/docs/13/transaction-iso.html#XACT-REPEATABLE-READ
            # NOTE: Django's default isolation_level is READ_COMMITTED.  REPEATABLE_READ is a stricter isolation level.
            # SERIALIZABLE is even stricter still (the highest isolation).  They ostensibly cause concurrent database
            # writes to not block, and if there is a conflict, the winner is the first one to write.  The loser
            # encounters a SerializationError upon commit.  And they are supposed to operate as if a snapshot was taken
            # of the DB when the transaction starts, however if the second started transaction queries something that
            # the first transaction put a lock on before the second transaction started, the second transaction's
            # operation will still hang until the first one commits, so I'm not sure what the point is supposed to be.
            # REPEATABLE_READ was tried for awhile, but has shown to still block validations during a load if for
            # example, the validation get_or_creates a tissue that the first transaction created before the second
            # transaction started.  I tested the same exact scenario with the tissue using SERIALIZABLE, and it didn't
            # block/hang.  However, it still blocked if I tried to validate the same study doc I was loading in the
            # background, so SERIALIZABLE seems better, but not a complete solution.
            # The only way to completely avoid this is to not touch the database at all in a validation, and even if we
            # didn't use the loading code, that would be very difficult.
            # NOTE: The only database architectures that support REPEATABLE_READ are postgres and MySQL.  The site will
            # still work in for example, SQLite, but concurrent validations could encounter timeout errors due to
            # record/row blocking, because the validations can only happen serially.
            "isolation_level": IsolationLevel.SERIALIZABLE,
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Security
# https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE", default=False)
CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE", default=False)
# Redirect HTTP to HTTPS
SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", default=False)
# Subdomains must use HTTPS
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(
    "SECURE_HSTS_INCLUDE_SUBDOMAINS", default=False
)
# Prevent modern browser access when cert expired
SECURE_HSTS_PRELOAD = env.bool("SECURE_HSTS_PRELOAD", default=False)

# If any of the HTTPS rules above fail, this tells browsers to refuse to connect to your domain via an insecure
# connection for the indicated number of seconds
# https://docs.djangoproject.com/en/5.1/ref/middleware/#http-strict-transport-security
SECURE_HSTS_SECONDS = env.int("SECURE_HSTS_SECONDS", default=0)

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# File storage location
MEDIA_URL = "/archive/"
MEDIA_ROOT = env.str("ARCHIVE_DIR", default=os.path.join(BASE_DIR, "archive"))
TEST_MEDIA_ROOT = env.str(
    "TEST_ARCHIVE_DIR", default=os.path.join(BASE_DIR, "archive_test")
)

DEFAULT_STORAGES = {
    # Django defaults:
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
    "production": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
}
TEST_STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.InMemoryStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}
TEST_FILE_STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

STORAGES = DEFAULT_STORAGES

# File storage handling for tests
# https://stackoverflow.com/questions/38345977/filefield-force-using-temporaryuploadedfile
# Added to make the submission.html form work.  Could not figure out how to specify this handler for individual fields.
# This avoids files using the InMemoryUploadedFile, which the load script complains about.
FILE_UPLOAD_HANDLERS = ["django.core.files.uploadhandler.TemporaryFileUploadHandler"]

# Custom URLs and content
FEEDBACK_URL = env.str("FEEDBACK_URL", default=None)
# Data submission and validation
SUBMISSION_FORM_URL = env.str("SUBMISSION_FORM_URL", default=None)
SUBMISSION_DRIVE_DOC_URL = env.str("SUBMISSION_DRIVE_DOC_URL", default=None)
SUBMISSION_DRIVE_TYPE = env.str("SUBMISSION_DRIVE_TYPE", default="Shared Drive")
SUBMISSION_DRIVE_FOLDER = env.str(
    "SUBMISSION_DRIVE_FOLDER", default="tracebase-submissions"
)

# Set up caching used by model cached_properties
# See: https://docs.djangoproject.com/en/dev/topics/cache/#setting-up-the-cache
PROD_CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "tracebase_cache_table",
        "TIMEOUT": None,
        "OPTIONS": {"MAX_ENTRIES": 1500000},
        "KEY_PREFIX": "PROD",
    }
}

TEST_CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "tracebase_cache_table",
        "TIMEOUT": 1200,
        "OPTIONS": {"MAX_ENTRIES": 1000},
        "KEY_PREFIX": "TEST",
    }
}

CACHES_SETTING = env.str("CACHES", default="PROD_CACHES")

CACHES: Dict[str, Dict] = PROD_CACHES
if CACHES_SETTING == "TEST_CACHES":
    CACHES = TEST_CACHES
elif CACHES_SETTING != "PROD_CACHES":
    print(
        f"Invalid CACHE_SETTINGS value: {CACHES_SETTING} in .env. Defaulting to PROD_CACHES. Valid values are "
        "TEST_CACHES and PROD_CACHES."
    )

# Define a custom test runner
# https://docs.djangoproject.com/en/4.2/topics/testing/advanced/#using-different-testing-frameworks
TEST_RUNNER = "TraceBase.runner.TraceBaseTestSuiteRunner"

# Logging settings
# NOTE: to print SQL, DEBUG must be True, and to print SQL during a particular test, each test method must be decorated
# with: `@override_settings(DEBUG=True)`
SQL_LOGGING = env.bool("SQL_LOGGING", default=False)
if SQL_LOGGING is True:
    LOGGING = {
        "version": 1,
        "filters": {
            "require_debug_true": {
                "()": "django.utils.log.RequireDebugTrue",
            }
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "filters": ["require_debug_true"],
                "class": "logging.StreamHandler",
            }
        },
        "loggers": {
            "django.db.backends": {
                "level": "DEBUG",
                "handlers": ["console"],
            }
        },
    }

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# See: django-debug-toolbar.readthedocs.io/en/latest/installation.html#disable-the-toolbar-when-running-tests-optional
DEBUG_TOOLBAR_ENABLED = False
TESTING = "test" in sys.argv
try:
    import debug_toolbar  # noqa: F401

    DEBUG_TOOLBAR_INSTALLED = True
except ImportError:
    DEBUG_TOOLBAR_INSTALLED = False

if (
    DEBUG
    and not TESTING
    and DEBUG_TOOLBAR_INSTALLED
    # Static files are configured to debug_toolbar's requirements
    and "django.contrib.staticfiles" in INSTALLED_APPS
    and STATIC_URL == "static/"
    # Templates are configured to debug_toolbar's requirements
    and any(
        [
            template["BACKEND"] == "django.template.backends.django.DjangoTemplates"
            and template["APP_DIRS"] is True
            for template in TEMPLATES
        ]
    )
):
    # On the dev site, you need to run `python manage.py collectstatic` to be able to use the toolbar
    # NOTE: Running collectstatic puts the aggregated static files in tracebase/static.  After running it, (which you
    # should only need to do once), run `mv TraceBase/static static`.
    PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
    STATIC_ROOT = os.path.join(PROJECT_DIR, "static")

    DEBUG_TOOLBAR_ENABLED = True
    INSTALLED_APPS.append("debug_toolbar")
    # See https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#add-the-middleware
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")
    INTERNAL_IPS = ALLOWED_HOSTS[:]
    # Override the debug toolbar's logic to decide whether to run or not (we're using the conditional logic above)
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda _: True,
        "SHOW_COLLAPSED": True,
        "SQL_WARNING_THRESHOLD": 70,
    }
